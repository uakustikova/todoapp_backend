#!/usr/bin/env node

async function waitForConnection(db) {
  try {
    await db.authenticate();
  } catch (error) {
    console.log("Could not connect, retrying in 1000 milliseconds...");
    await new Promise((resolve) => setTimeout(resolve, 1000));
    await waitForConnection(db);
  }
}

function start() {
  var db = require("../db/db");

  waitForConnection(db)
    .then(() => db.sync({ force: false }))
    .then(() => console.log("All models were synchronized successfully."))
    .then(() => startServer());
}

function startServer() {
  /**
   * Module dependencies.
   */
  console.log("Server started");
  var app = require("../app");
  var debug = require("debug")("backend:server");
  var http = require("http");

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  /**
   * Get host from environment and store in Express.
   */

  var host = normalizePort(process.env.HOST || "localhost");
  app.set("host", host);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log("Listening on " + bind);
  }
}

console.log("About to start server");
start();
